#!groovy

//声明式语法基本架构

@Library('jenkinslib@master') _

def tools = new org.devops.tools()  //格式化输出工具
def build = new org.devops.build()  //构建

String workspace = "/var/jenkins/workspace"
//选项参数变量
String buildType = "$env.buildType"
String buildShell = "$env. buildShell"

//Pipeline
pipeline {
    agent { node {  label "master"   //指定运行节点的标签或者名称
                    customWorkspace "${workspace}"   //指定运行工作目录（可选）
            }
    }
    
    //运行选项
    options {
        timestamps()  //日志会有时间
        skipDefaultCheckout()  //删除隐式checkout scm语句
        disableConcurrentBuilds() //禁止并行
        timeout(time: 1, unit: 'HOURS')  //流水线超时设置1h
    }
    
    //阶段
    stages {
        stage("Output"){
            steps{
                echo "${BRANCH}"
                
                script{
                    build.Build(buildType,buildShell)
                }
            }
        }
        //下载代码
        stage("GetCode"){ //阶段名称
            //when { environment name: 'test', value: 'abcd' }
            steps{  //步骤
                timeout(time:5, unit:"MINUTES"){   //步骤超时时间
                    script{ //填写运行代码
                        println('获取代码')
                        tools.PrintMes("获取代码",'green')
                        //println("${test}")
                    }
                }
            }
        }

        stage("Compile"){
            //并行
            failFast true
            parallel {
                stage("compile1"){
                    steps{
                        timeout(time:20, unit:"MINUTES"){
                            script{
                                println('应用打包')
                                tools.PrintMes("应用打包",'green')
                                mvnHome = tool "maven"
                                println(mvnHome)
                                sh "${mvnHome}/bin/mvn --version"
                            }
                        }
                    }
                }
        
                stage("compile2"){
                    steps{
                        timeout(time:30, unit:"MINUTES"){
                            script{
                                print("编译")
                                tools.PrintMes("编译",'green')
                                input id: 'Test', message: '是否要继续？', ok: '是！', parameters: [choice(choices: ['a', 'b'], description: '', name: 'test1')], submitter: 'wangxiaofei,admin'
                            }
                        }
                    }
                }
                
                //并行3
                stage("compile3"){
                    steps{
                        timeout(time:30, unit:"MINUTES"){
                            script{
                                print("并行3")
                                tools.PrintMes("并行3", "green")
                            }
                        }
                    }
                }
            }
        }
    }

    //构建后操作
    post {
        always {
            script{
                println("always")
            }
        }

        success {
            script{
                currentBuild.description = "\n 构建成功!" 
            }
        }

        failure {
            script{
                currentBuild.description = "\n 构建失败!" 
            }
        }

        aborted {
            script{
                currentBuild.description = "\n 构建取消!" 
            }
        }
    }
}